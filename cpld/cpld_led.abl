MODULE cpld_led

TITLE 'State Machines '

LIBRARY 'lattice';

DECLARATIONS

timdiv1 node istype 'reg_d,buffer';
timdiv2 node istype 'reg_d,buffer';
timdiv3 node istype 'reg_d,buffer';
timdiv4 node istype 'reg_d,buffer';
timdiv5 node istype 'reg_d,buffer';
timdiv6 node istype 'reg_d,buffer';
timdiv7 node istype 'reg_d,buffer';
timdiv8 node istype 'reg_d,buffer';
timdiv9 node istype 'reg_d,buffer';
timdiv10 node istype 'reg_d,buffer';
timdiv11 node istype 'reg_d,buffer';
timdiv12 node istype 'reg_d,buffer';
timdiv13 node istype 'reg_d,buffer';

nRST pin 53;
Q0..Q29 node istype 'reg';
clk_out pin 52 istype 'com';
diode   pin 70 istype 'com';
osc_dis, osc_rst, osc_out, tmr_out node istype 'com';

XLAT_OSCTIMER(DYNOSCDIS, TIMERRES, OSCOUT, TIMEROUT, 2000000);//1048576);

cup1_motor_D pin 4;
cup1_motor_U pin 5;
cup1_LED_OUT pin 28 istype 'com'; //Pin 28

cup2_motor_D pin 6;
cup2_motor_U pin 7;
cup2_LED_OUT pin 29 istype 'com';

cup3_motor_D pin 8;
cup3_motor_U pin 9;
cup3_LED_OUT pin 30 istype 'com';

cup4_motor_D pin 11;
cup4_motor_U pin 12;
cup4_LED_OUT pin 31 istype 'com';

cup5_motor_D pin 13;
cup5_motor_U pin 14;
cup5_LED_OUT pin 32 istype 'com';

cup6_motor_D pin 15;
cup6_motor_U pin 16;
cup6_LED_OUT pin 33 istype 'com';

cup7_motor_D pin 17;
cup7_motor_U pin 20;
cup7_LED_OUT pin 39 istype 'com';

cup8_motor_D pin 21;
cup8_motor_U pin 22;
cup8_LED_OUT pin 40 istype 'com';

cup9_motor_D pin 23;
cup9_motor_U pin 24;
cup9_LED_OUT pin 41 istype 'com';

cup10_motor_D pin 25;
cup10_motor_U pin 26;
cup10_LED_OUT pin 42 istype 'com';

CUP1 = [Q2..Q0];
A0 = [0,0,0];
A1 = [0,0,1];
A2 = [0,1,0];
A3 = [0,1,1];

CUP2 = [Q5..Q3];
B0 = [0,0,0];
B1 = [0,0,1];
B2 = [0,1,0];
B3 = [0,1,1];

CUP3 = [Q8..Q6];
C0 = [0,0,0];
C1 = [0,0,1];
C2 = [0,1,0];
C3 = [0,1,1];

CUP4 = [Q11..Q9];
D0 = [0,0,0];
D1 = [0,0,1];
D2 = [0,1,0];
D3 = [0,1,1];

CUP5 = [Q14..Q12];
E0 = [0,0,0];
E1 = [0,0,1];
E2 = [0,1,0];
E3 = [0,1,1];

CUP6 = [Q17..Q15];
F0 = [0,0,0];
F1 = [0,0,1];
F2 = [0,1,0];
F3 = [0,1,1];

CUP7 = [Q20..Q18];
G0 = [0,0,0];
G1 = [0,0,1];
G2 = [0,1,0];
G3 = [0,1,1];

CUP8 = [Q23..Q21];
H0 = [0,0,0];
H1 = [0,0,1];
H2 = [0,1,0];
H3 = [0,1,1];

CUP9 = [Q26..Q24];
I0 = [0,0,0];
I1 = [0,0,1];
I2 = [0,1,0];
I3 = [0,1,1];

CUP10 = [Q29..Q27];
J0 = [0,0,0];
J1 = [0,0,1];
J2 = [0,1,0];
J3 = [0,1,1];


STATE_DIAGRAM CUP1

state A0:	if (nRST == 1) then A0
		else if (cup1_motor_D == 1) then A1
		else  A0;

state A1: 	if (nRST == 1) then A0
      		else if (cup1_motor_D == 1) then A3
		else  A2;

state A2: 	if (nRST == 1) then A0
      		else if (cup1_motor_D == 1) then A3
		else  A1;

state A3: 	if (nRST == 1) then A0
      		else if (cup1_motor_U == 1) then A0
		else  A3;

STATE_DIAGRAM CUP2
state B0:	if (nRST == 1) then B0
		else if (cup2_motor_D == 1) then B1
		else  B0;

state B1: 	if (nRST == 1) then B0
      		else if (cup2_motor_D == 1) then B3
		else  B2;

state B2: 	if (nRST == 1) then B0
      		else if (cup2_motor_D == 1) then B3
		else  B1;

state B3: 	if (nRST == 1) then B0
      		else if (cup2_motor_U == 1) then B0
		else  B3;

STATE_DIAGRAM CUP3
state C0:	if (nRST == 1) then C0
		else if (cup3_motor_D == 1) then C1
		else  C0;

state C1: 	if (nRST == 1) then C0
      		else if (cup3_motor_D == 1) then C3
		else  C2;

state C2: 	if (nRST == 1) then C0
      		else if (cup3_motor_D == 1) then C3
		else  C1;

state C3: 	if (nRST == 1) then C0
      		else if (cup3_motor_U == 1) then C0
		else  C3;

STATE_DIAGRAM CUP4
state D0:	if (nRST == 1) then D0
		else if (cup4_motor_D == 1) then D1
		else  D0;

state D1: 	if (nRST == 1) then D0
      		else if (cup4_motor_D == 1) then D3
		else  D2;

state D2: 	if (nRST == 1) then D0
      		else if (cup4_motor_D == 1) then D3
		else  D1;

state D3: 	if (nRST == 1) then D0
      		else if (cup4_motor_U == 1) then D0
		else  D3;

STATE_DIAGRAM CUP5
state E0:	if (nRST == 1) then E0
		else if (cup5_motor_D == 1) then E1
		else  E0;

state E1: 	if (nRST == 1) then E0
    		else if (cup5_motor_D == 1) then E3
		else  E2;

state E2: 	if (nRST == 1) then E0
      		else if (cup5_motor_D == 1) then E3
		else  E1;

state E3: 	if (nRST == 1) then E0
      		else if (cup5_motor_U == 1) then E0
		else  E3;

STATE_DIAGRAM CUP6
state F0:	if (nRST == 1) then F0
		else if (cup6_motor_D == 1) then F1
		else  F0;

state F1: 	if (nRST == 1) then F0
    		else if (cup6_motor_D == 1) then F3
		else  F2;

state F2: 	if (nRST == 1) then F0
      		else if (cup6_motor_D == 1) then F3
		else  F1;

state F3: 	if (nRST == 1) then F0
      		else if (cup6_motor_U == 1) then F0
		else  F3;

STATE_DIAGRAM CUP7
state G0:	if (nRST == 1) then G0
		else if (cup7_motor_D == 1) then G1
		else  G0;

state G1: 	if (nRST == 1) then G0
    		else if (cup7_motor_D == 1) then G3
		else  G2;

state G2: 	if (nRST == 1) then G0
      		else if (cup7_motor_D == 1) then G3
		else  G1;

state G3: 	if (nRST == 1) then G0
      		else if (cup7_motor_U == 1) then G0
		else  G3;

STATE_DIAGRAM CUP8
state H0:	if (nRST == 1) then H0
		else if (cup8_motor_D == 1) then H1
		else  H0;

state H1: 	if (nRST == 1) then H0
    		else if (cup8_motor_D == 1) then H3
		else  H2;

state H2: 	if (nRST == 1) then H0
      		else if (cup8_motor_D == 1) then H3
		else  H1;

state H3: 	if (nRST == 1) then H0
      		else if (cup8_motor_U == 1) then H0
		else  H3;

STATE_DIAGRAM CUP9
state I0:	if (nRST == 1) then I0
		else if (cup9_motor_D == 1) then I1
		else  I0;

state I1: 	if (nRST == 1) then I0
    		else if (cup9_motor_D == 1) then I3
		else  I2;

state I2: 	if (nRST == 1) then I0
      		else if (cup9_motor_D == 1) then I3
		else  I1;

state I3: 	if (nRST == 1) then I0
      		else if (cup9_motor_U == 1) then I0
		else  I3;

STATE_DIAGRAM CUP10
state J0:	if (nRST == 1) then J0
		else if (cup10_motor_D == 1) then J1
		else  J0;

state J1: 	if (nRST == 1) then J0
    		else if (cup10_motor_D == 1) then J3
		else  J2;

state J2: 	if (nRST == 1) then J0
      		else if (cup10_motor_D == 1) then J3
		else  J1;

state J3: 	if (nRST == 1 # cup10_motor_U == 1) then J0
      		else if (cup10_motor_U == 1) then J0
		else  J3;


EQUATIONS

osc_dis = 0;
osc_rst = 0;

P1 OSCTIMER(osc_dis, osc_rst, osc_out, tmr_out);

timdiv1 := !timdiv1;
timdiv1.CLK = tmr_out;

timdiv2 := !timdiv2;
timdiv2.CLK = timdiv1;

timdiv3 := !timdiv3;
timdiv3.CLK = timdiv2;

timdiv4 := !timdiv4;
timdiv4.CLK = timdiv3;

timdiv5 := !timdiv5;
timdiv5.CLK = timdiv4;

timdiv6 := !timdiv6;
timdiv6.CLK = timdiv5;

timdiv7 := !timdiv7;
timdiv7.CLK = timdiv6;

timdiv8 := !timdiv8;
timdiv8.CLK = timdiv7;

timdiv9 := !timdiv9;
timdiv10 := !timdiv10;
timdiv11 := !timdiv11;
timdiv12 := !timdiv12;

timdiv9.CLK = timdiv8;
timdiv10.CLK = timdiv9;
timdiv11.CLK = timdiv10;
timdiv12.CLK = timdiv11;

timdiv13.CLK = timdiv12;
timdiv13 := !timdiv13;

diode = timdiv13;   
clk_out = timdiv13;  //Send signal for 200ms
CUP1.CLK = timdiv13;
CUP2.CLK = timdiv13;
CUP3.CLK = timdiv13;
CUP4.CLK = timdiv13;
CUP5.CLK = timdiv13;
CUP6.CLK = timdiv13;
CUP7.CLK = timdiv13;
CUP8.CLK = timdiv13;
CUP9.CLK = timdiv13;
CUP10.CLK = timdiv13;



truth_table ([CUP1]->[cup1_LED_OUT])
		[A0]->[1];
		[A1]->[0];
		[A2]->[1];
		[A3]->[0];

truth_table ([CUP2]->[cup2_LED_OUT])
		[B0]->[1];
		[B1]->[0];
		[B2]->[1];
		[B3]->[0];

truth_table ([CUP3]->[cup3_LED_OUT])
		[C0]->[1];
		[C1]->[0];
		[C2]->[1];
		[C3]->[0];

truth_table ([CUP4]->[cup4_LED_OUT])
	    	[D0]->[1];
		[D1]->[0];
		[D2]->[1];
		[D3]->[0];

truth_table ([CUP5]->[cup5_LED_OUT])
		[E0]->[1];
		[E1]->[0];
		[E2]->[1];
		[E3]->[0];

truth_table ([CUP6]->[cup6_LED_OUT])
		[F0]->[1];
		[F1]->[0];
		[F2]->[1];
		[F3]->[0];
truth_table ([CUP7]->[cup7_LED_OUT])
		[G0]->[1];
		[G1]->[0];
		[G2]->[1];
		[G3]->[0];
truth_table ([CUP8]->[cup8_LED_OUT])
		[H0]->[1];
		[H1]->[0];
		[H2]->[1];
		[H3]->[0];
truth_table ([CUP9]->[cup9_LED_OUT])
		[I0]->[1];
		[I1]->[0];
		[I2]->[1];
		[I3]->[0];
truth_table ([CUP10]->[cup10_LED_OUT])
		[J0]->[1];
		[J1]->[0];
		[J2]->[1];
		[J3]->[0];

		
END 
